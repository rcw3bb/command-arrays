plugins {
    id 'java-library'
    id 'org.javamodularity.moduleplugin' version '1.8.10'
    id 'jacoco'
    id 'pmd'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'signing'
}

group 'xyz.ronella.casual'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.11

repositories {
    if (Boolean.valueOf(USE_PRIVATE_REPO)) {
        println "Using Private Repository"

        maven {
            url 'https://repo.ronella.xyz/artifactory/java-central'
            credentials {
                username "${artifactoryUsername}"
                password "${artifactoryPassword}"
            }
            mavenContent {
                releasesOnly()
            }
        }
        mavenLocal {
            mavenContent {
                snapshotsOnly()
            }
        }
    }
    else {
        println "Using mavenCentral Repository"
        mavenCentral()
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.45.0"
    rulesMinimumPriority = 5
    ruleSetFiles = files('config/pmd/java/custom.xml')
    ruleSets = []
}

dependencies {
    implementation 'xyz.ronella.casual:trivial-chunk:2.10.0-SNAPSHOT'

    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.8.2'
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: [testClasses]) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

jar.finalizedBy(javadocJar, sourcesJar, testsJar)

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        repositories.maven {
            def publishingPath = version.toString().contains("SNAPSHOT") ? 'snapshots' : 'internal'
            url "https://repo.ronella.xyz/archiva/repository/${publishingPath}/"
            credentials {
                username "${archivaUsername}"
                password "${archivaPassword}"
            }
        }
        mavenJava(MavenPublication) {
            from components.java
            artifact testsJar
            pom {
                name = 'Command Arrays'
                description = 'A library of generating a command array compatible with CommandRunner from module xyz.ronella.casual.trivial'
                url = 'https://github.com/rcw3bb/command-arrays'
                properties = [
                        "inceptionYear": '2022'
                ]
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/rcw3bb/command-arrays/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'rcw3bb'
                        name = 'Ronaldo Webb'
                        email = 'ronaldo.c.webb@gmail.com'
                    }
                }
                scm {
                    connection = 'https://github.com/rcw3bb/command-arrays.git'
                    developerConnection = 'https://github.com/rcw3bb/command-arrays.git'
                    url = 'https://github.com/rcw3bb/command-arrays'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri('https://oss.sonatype.org/service/local/')
            snapshotRepositoryUrl = uri('https://oss.sonatype.org/content/repositories/snapshots/')
            //stagingProfileId = ""
        }
    }
}

closeAndReleaseSonatypeStagingRepository.dependsOn('publishToSonatype')

test {
    dependsOn(pmdMain)
    finalizedBy(jacocoTestReport)
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
